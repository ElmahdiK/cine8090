{"ast":null,"code":"import _asyncToGenerator from \"/Users/ek_mac/Documents/GITHUB_OFFICIAL/cine8090/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// le decorateur \"Injectable\" est la façon la plus simple pour déclarer une classe comme étant un service\n// \"providedIn\" explique à angular que ce service doit être enregistrer à la racine \"root\" de l'application\n// qu'il y a aura qu'une seule instance de ce service et que donc toute l'application partagera les mêmes données et la même logique\n// En effet, ce sera très souvent le cas pour vos services, car ça permet de s'assurer de n'avoir qu'une seule instance du service, partagée par tous les partis intéressés.\nexport class MovieCardsService {\n  constructor(http) {\n    this.http = http;\n    this.result = [];\n    this.API_KEY = environment.apiKey;\n    this.BASE_URL = `https://api.themoviedb.org/3`;\n    this.IMG_URL = `https://image.tmdb.org/t/p/w500`;\n    //QUERY: string = `primary_release_date.gte=1980-01-01&primary_release_date.lte=1999-12-31`;\n    /*\n         ex: What is are the best movies from 1980?\n    URL: https://api.themoviedb.org/3/discover/movie?primary_release_year=1980&sort_by=vote_average.desc&api_key=d744e12bfd78a041826aede766e68d5f\n    */\n    this.QUERY = `with_companies=2&with_genres=16&primary_release_date.gte=1980-01-01&primary_release_date.lte=1999-12-31`;\n    this.endpointURL = `${this.BASE_URL}/discover/movie?api_key=${this.API_KEY}&${this.QUERY}&sort_by=primary_release_date.desc`;\n    this.movieCards = [];\n    this.totalPages = 0;\n    this.movieCards = [];\n    this.totalPages = 0;\n    this.getData().subscribe(data => {\n      data.results.forEach(item => this.loadMovie(item));\n      this.totalPages = data.total_pages;\n    });\n  }\n  loadMovie(item) {\n    this.movieCards.push({\n      id: item.id,\n      title: item.title,\n      overview: item.overview,\n      poster_path: this.IMG_URL + item.poster_path,\n      backdrop_path: this.IMG_URL + item.backdrop_path,\n      release_date: new Date(item.release_date)\n    });\n  }\n  getListMovies(page) {\n    this.movieCards = [];\n    this.getMovies(page).then(res => {\n      res.results.forEach(item => {\n        this.movieCards.push({\n          id: item.id,\n          title: item.title,\n          overview: item.overview,\n          poster_path: this.IMG_URL + item.poster_path,\n          backdrop_path: this.IMG_URL + item.backdrop_path,\n          release_date: new Date(item.release_date)\n        });\n      });\n    });\n    return this.movieCards;\n  }\n  getTotalPages() {\n    this.totalPages = 0;\n    this.getMovies().then(res => {\n      this.totalPages = res.total_pages;\n    });\n    return this.totalPages;\n  }\n  getMovies(page) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var _a;\n      const data = yield fetch(page ? `${_this.endpointURL}&page=${page}` : _this.endpointURL);\n      return (_a = yield data.json()) !== null && _a !== void 0 ? _a : [];\n    })();\n  }\n  getData(page) {\n    return this.http.get(page ? `${this.endpointURL}&page=${page}` : this.endpointURL);\n  }\n  getContentMovie() {\n    return new Promise((resolve, reject) => {});\n  }\n  // getContent(): Promise<MovieCard[]> {\n  //   return new Promise((resolve, reject) => {\n  //     console.log(`ATTENTION api lancé !`);\n  //     let movies: any = [];\n  //     this.http.get(`${this.endpointURL}`).subscribe((data: any) => {\n  //       console.log(data);\n  //       this.TOTAL_PAGES = data.total_pages;\n  //       for (let i = 1; i <= this.TOTAL_PAGES; i++) {\n  //         this.http\n  //           .get(`${this.endpointURL}&page=${i}`)\n  //           .subscribe((data: any) => {\n  //             data[`results`].forEach((item: any) => {\n  //               // console.log(item);\n  //               movies.push({\n  //                 id: item.id,\n  //                 title: item.title,\n  //                 overview: item.overview,\n  //                 poster_path: this.IMG_URL + item.poster_path,\n  //                 backdrop_path: this.IMG_URL + item.backdrop_path,\n  //                 release_date: new Date(item.release_date),\n  //               });\n  //             });\n  //           });\n  //         if (i === this.TOTAL_PAGES) {\n  //           console.log(i, 'api terminé');\n  //           resolve(movies);\n  //         }\n  //       }\n  //     });\n  //   });\n  // }\n  getPageContents(fromPage = 1) {\n    return this.movieCards.slice(fromPage * 20 - 20, fromPage * 20);\n  }\n  // getTotalPages(): number {\n  //   return this.TOTAL_PAGES;\n  // }\n  /*\n        getContent(page=1) {\n            let movies:any=[];\n            return this.http.get(`${this.endpointURL}&page=${page}`).subscribe((data: any) => {\n                data[`results`].forEach((item: any) => {\n                    this.movieCards.push({\n                        id: item.id,\n                        title: item.title,\n                        overview: item.overview,\n                        poster_path: environment.IMG_URL + item.poster_path,\n                        backdrop_path: environment.IMG_URL + item.backdrop_path,\n                        release_date: new Date(item.release_date)\n                    });\n                    return this.movieCards;\n                })\n            })\n        }\n    */\n  getAllMovieCards(page = 1) {\n    return this.http.get(`${this.endpointURL}&page=${page}`);\n    /*\n                .toPromise()\n                .then(\n                    (res: any) => {\n                        this.result = res.results.map((item: any) => {\n                            this.movieCards.push({\n                                id:item.id,\n                                title:item.title,\n                                overview:item.overview,\n                                poster_path:environment.IMG_URL + item.poster_path,\n                                backdrop_path:environment.IMG_URL + item.backdrop_path,\n                                release_date:new Date(item.release_date)\n                            });\n                        })\n                        console.log(this.movieCards);\n                        resolve();\n                    }, msg => reject());\n        })*/\n  }\n  /*\n        getAllMovieCards(): MovieCard[] {\n            console.log(\"bon ok\", this.movieCards)\n            return this.movieCards;\n        }*/\n  getMovieCardById(movieCardId) {\n    console.log('ok', movieCardId, this.movieCards);\n    const movieCard = this.movieCards.find(movieCard => movieCard.id === movieCardId);\n    if (!movieCard) throw new Error('MovieCard not found!');else return movieCard;\n  }\n}\nMovieCardsService.ɵfac = function MovieCardsService_Factory(t) {\n  return new (t || MovieCardsService)(i0.ɵɵinject(i1.HttpClient));\n};\nMovieCardsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MovieCardsService,\n  factory: MovieCardsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["environment","i0","i1","MovieCardsService","constructor","http","result","API_KEY","apiKey","BASE_URL","IMG_URL","QUERY","endpointURL","movieCards","totalPages","getData","subscribe","data","results","forEach","item","loadMovie","total_pages","push","id","title","overview","poster_path","backdrop_path","release_date","Date","getListMovies","page","getMovies","then","res","getTotalPages","_this","_asyncToGenerator","_a","fetch","json","get","getContentMovie","Promise","resolve","reject","getPageContents","fromPage","slice","getAllMovieCards","getMovieCardById","movieCardId","console","log","movieCard","find","Error","ɵfac","MovieCardsService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"sources":["/Users/ek_mac/Documents/GITHUB_OFFICIAL/cine8090/src/app/services/movie-cards.service.ts"],"sourcesContent":["import { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// le decorateur \"Injectable\" est la façon la plus simple pour déclarer une classe comme étant un service\n// \"providedIn\" explique à angular que ce service doit être enregistrer à la racine \"root\" de l'application\n// qu'il y a aura qu'une seule instance de ce service et que donc toute l'application partagera les mêmes données et la même logique\n// En effet, ce sera très souvent le cas pour vos services, car ça permet de s'assurer de n'avoir qu'une seule instance du service, partagée par tous les partis intéressés.\nexport class MovieCardsService {\n    constructor(http) {\n        this.http = http;\n        this.result = [];\n        this.API_KEY = environment.apiKey;\n        this.BASE_URL = `https://api.themoviedb.org/3`;\n        this.IMG_URL = `https://image.tmdb.org/t/p/w500`;\n        //QUERY: string = `primary_release_date.gte=1980-01-01&primary_release_date.lte=1999-12-31`;\n        /*\n      \n      ex: What is are the best movies from 1980?\n      URL: https://api.themoviedb.org/3/discover/movie?primary_release_year=1980&sort_by=vote_average.desc&api_key=d744e12bfd78a041826aede766e68d5f\n      */\n        this.QUERY = `with_companies=2&with_genres=16&primary_release_date.gte=1980-01-01&primary_release_date.lte=1999-12-31`;\n        this.endpointURL = `${this.BASE_URL}/discover/movie?api_key=${this.API_KEY}&${this.QUERY}&sort_by=primary_release_date.desc`;\n        this.movieCards = [];\n        this.totalPages = 0;\n        this.movieCards = [];\n        this.totalPages = 0;\n        this.getData().subscribe((data) => {\n            data.results.forEach((item) => this.loadMovie(item));\n            this.totalPages = data.total_pages;\n        });\n    }\n    loadMovie(item) {\n        this.movieCards.push({\n            id: item.id,\n            title: item.title,\n            overview: item.overview,\n            poster_path: this.IMG_URL + item.poster_path,\n            backdrop_path: this.IMG_URL + item.backdrop_path,\n            release_date: new Date(item.release_date),\n        });\n    }\n    getListMovies(page) {\n        this.movieCards = [];\n        this.getMovies(page).then((res) => {\n            res.results.forEach((item) => {\n                this.movieCards.push({\n                    id: item.id,\n                    title: item.title,\n                    overview: item.overview,\n                    poster_path: this.IMG_URL + item.poster_path,\n                    backdrop_path: this.IMG_URL + item.backdrop_path,\n                    release_date: new Date(item.release_date),\n                });\n            });\n        });\n        return this.movieCards;\n    }\n    getTotalPages() {\n        this.totalPages = 0;\n        this.getMovies().then((res) => {\n            this.totalPages = res.total_pages;\n        });\n        return this.totalPages;\n    }\n    async getMovies(page) {\n        var _a;\n        const data = await fetch(page ? `${this.endpointURL}&page=${page}` : this.endpointURL);\n        return (_a = (await data.json())) !== null && _a !== void 0 ? _a : [];\n    }\n    getData(page) {\n        return this.http.get(page ? `${this.endpointURL}&page=${page}` : this.endpointURL);\n    }\n    getContentMovie() {\n        return new Promise((resolve, reject) => { });\n    }\n    // getContent(): Promise<MovieCard[]> {\n    //   return new Promise((resolve, reject) => {\n    //     console.log(`ATTENTION api lancé !`);\n    //     let movies: any = [];\n    //     this.http.get(`${this.endpointURL}`).subscribe((data: any) => {\n    //       console.log(data);\n    //       this.TOTAL_PAGES = data.total_pages;\n    //       for (let i = 1; i <= this.TOTAL_PAGES; i++) {\n    //         this.http\n    //           .get(`${this.endpointURL}&page=${i}`)\n    //           .subscribe((data: any) => {\n    //             data[`results`].forEach((item: any) => {\n    //               // console.log(item);\n    //               movies.push({\n    //                 id: item.id,\n    //                 title: item.title,\n    //                 overview: item.overview,\n    //                 poster_path: this.IMG_URL + item.poster_path,\n    //                 backdrop_path: this.IMG_URL + item.backdrop_path,\n    //                 release_date: new Date(item.release_date),\n    //               });\n    //             });\n    //           });\n    //         if (i === this.TOTAL_PAGES) {\n    //           console.log(i, 'api terminé');\n    //           resolve(movies);\n    //         }\n    //       }\n    //     });\n    //   });\n    // }\n    getPageContents(fromPage = 1) {\n        return this.movieCards.slice(fromPage * 20 - 20, fromPage * 20);\n    }\n    // getTotalPages(): number {\n    //   return this.TOTAL_PAGES;\n    // }\n    /*\n          getContent(page=1) {\n              let movies:any=[];\n              return this.http.get(`${this.endpointURL}&page=${page}`).subscribe((data: any) => {\n                  data[`results`].forEach((item: any) => {\n                      this.movieCards.push({\n                          id: item.id,\n                          title: item.title,\n                          overview: item.overview,\n                          poster_path: environment.IMG_URL + item.poster_path,\n                          backdrop_path: environment.IMG_URL + item.backdrop_path,\n                          release_date: new Date(item.release_date)\n                      });\n                      return this.movieCards;\n                  })\n              })\n          }\n      */\n    getAllMovieCards(page = 1) {\n        return this.http.get(`${this.endpointURL}&page=${page}`);\n        /*\n                    .toPromise()\n                    .then(\n                        (res: any) => {\n                            this.result = res.results.map((item: any) => {\n                                this.movieCards.push({\n                                    id:item.id,\n                                    title:item.title,\n                                    overview:item.overview,\n                                    poster_path:environment.IMG_URL + item.poster_path,\n                                    backdrop_path:environment.IMG_URL + item.backdrop_path,\n                                    release_date:new Date(item.release_date)\n                                });\n                            })\n                            console.log(this.movieCards);\n                            resolve();\n                        }, msg => reject());\n            })*/\n    }\n    /*\n          getAllMovieCards(): MovieCard[] {\n              console.log(\"bon ok\", this.movieCards)\n              return this.movieCards;\n          }*/\n    getMovieCardById(movieCardId) {\n        console.log('ok', movieCardId, this.movieCards);\n        const movieCard = this.movieCards.find((movieCard) => movieCard.id === movieCardId);\n        if (!movieCard)\n            throw new Error('MovieCard not found!');\n        else\n            return movieCard;\n    }\n}\nMovieCardsService.ɵfac = function MovieCardsService_Factory(t) { return new (t || MovieCardsService)(i0.ɵɵinject(i1.HttpClient)); };\nMovieCardsService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: MovieCardsService, factory: MovieCardsService.ɵfac, providedIn: 'root' });\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}