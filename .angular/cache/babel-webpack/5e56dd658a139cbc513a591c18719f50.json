{"ast":null,"code":"import _asyncToGenerator from \"/Users/ek_mac/Documents/GITHUB_OFFICIAL/cine8090/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// le decorateur \"Injectable\" est la façon la plus simple pour déclarer une classe comme étant un service\n// \"providedIn\" explique à angular que ce service doit être enregistrer à la racine \"root\" de l'application\n// qu'il y a aura qu'une seule instance de ce service et que donc toute l'application partagera les mêmes données et la même logique\n// En effet, ce sera très souvent le cas pour vos services, car ça permet de s'assurer de n'avoir qu'une seule instance du service, partagée par tous les partis intéressés.\nexport let MovieCardsService = /*#__PURE__*/(() => {\n  class MovieCardsService {\n    constructor(http) {\n      this.http = http;\n      this.result = [];\n      this.API_KEY = environment.apiKey;\n      this.BASE_URL = `https://api.themoviedb.org/3`;\n      this.IMG_URL = `https://image.tmdb.org/t/p/w500`;\n      //QUERY: string = `primary_release_date.gte=1980-01-01&primary_release_date.lte=1999-12-31`;\n      /*\n           ex: What is are the best movies from 1980?\n      URL: https://api.themoviedb.org/3/discover/movie?primary_release_year=1980&sort_by=vote_average.desc&api_key=d744e12bfd78a041826aede766e68d5f\n      */\n      this.QUERY = `with_companies=2&with_genres=16&primary_release_date.gte=1980-01-01&primary_release_date.lte=1999-12-31`;\n      this.endpointURL = `${this.BASE_URL}/discover/movie?api_key=${this.API_KEY}&${this.QUERY}&sort_by=primary_release_date.desc`;\n      this.movieCards = [];\n      this.totalPages = 0;\n      this.movieCards = [];\n      this.totalPages = 0;\n      this.getData().subscribe(data => {\n        data.results.forEach(item => this.loadMovie(item));\n        this.totalPages = data.total_pages;\n      });\n    }\n    loadMovie(item) {\n      this.movieCards.push({\n        id: item.id,\n        title: item.title,\n        overview: item.overview,\n        poster_path: this.IMG_URL + item.poster_path,\n        backdrop_path: this.IMG_URL + item.backdrop_path,\n        release_date: new Date(item.release_date)\n      });\n    }\n    getListMovies(page) {\n      this.movieCards = [];\n      this.getMovies(page).then(res => {\n        res.results.forEach(item => {\n          this.movieCards.push({\n            id: item.id,\n            title: item.title,\n            overview: item.overview,\n            poster_path: this.IMG_URL + item.poster_path,\n            backdrop_path: this.IMG_URL + item.backdrop_path,\n            release_date: new Date(item.release_date)\n          });\n        });\n      });\n      return this.movieCards;\n    }\n    getTotalPages() {\n      this.totalPages = 0;\n      this.getMovies().then(res => {\n        this.totalPages = res.total_pages;\n      });\n      return this.totalPages;\n    }\n    getMovies(page) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        var _a;\n        const data = yield fetch(page ? `${_this.endpointURL}&page=${page}` : _this.endpointURL);\n        return (_a = yield data.json()) !== null && _a !== void 0 ? _a : [];\n      })();\n    }\n    getData(page) {\n      return this.http.get(page ? `${this.endpointURL}&page=${page}` : this.endpointURL);\n    }\n    getContentMovie() {\n      return new Promise((resolve, reject) => {});\n    }\n    // getContent(): Promise<MovieCard[]> {\n    //   return new Promise((resolve, reject) => {\n    //     console.log(`ATTENTION api lancé !`);\n    //     let movies: any = [];\n    //     this.http.get(`${this.endpointURL}`).subscribe((data: any) => {\n    //       console.log(data);\n    //       this.TOTAL_PAGES = data.total_pages;\n    //       for (let i = 1; i <= this.TOTAL_PAGES; i++) {\n    //         this.http\n    //           .get(`${this.endpointURL}&page=${i}`)\n    //           .subscribe((data: any) => {\n    //             data[`results`].forEach((item: any) => {\n    //               // console.log(item);\n    //               movies.push({\n    //                 id: item.id,\n    //                 title: item.title,\n    //                 overview: item.overview,\n    //                 poster_path: this.IMG_URL + item.poster_path,\n    //                 backdrop_path: this.IMG_URL + item.backdrop_path,\n    //                 release_date: new Date(item.release_date),\n    //               });\n    //             });\n    //           });\n    //         if (i === this.TOTAL_PAGES) {\n    //           console.log(i, 'api terminé');\n    //           resolve(movies);\n    //         }\n    //       }\n    //     });\n    //   });\n    // }\n    getPageContents(fromPage = 1) {\n      return this.movieCards.slice(fromPage * 20 - 20, fromPage * 20);\n    }\n    // getTotalPages(): number {\n    //   return this.TOTAL_PAGES;\n    // }\n    /*\n          getContent(page=1) {\n              let movies:any=[];\n              return this.http.get(`${this.endpointURL}&page=${page}`).subscribe((data: any) => {\n                  data[`results`].forEach((item: any) => {\n                      this.movieCards.push({\n                          id: item.id,\n                          title: item.title,\n                          overview: item.overview,\n                          poster_path: environment.IMG_URL + item.poster_path,\n                          backdrop_path: environment.IMG_URL + item.backdrop_path,\n                          release_date: new Date(item.release_date)\n                      });\n                      return this.movieCards;\n                  })\n              })\n          }\n      */\n    getAllMovieCards(page = 1) {\n      return this.http.get(`${this.endpointURL}&page=${page}`);\n      /*\n                  .toPromise()\n                  .then(\n                      (res: any) => {\n                          this.result = res.results.map((item: any) => {\n                              this.movieCards.push({\n                                  id:item.id,\n                                  title:item.title,\n                                  overview:item.overview,\n                                  poster_path:environment.IMG_URL + item.poster_path,\n                                  backdrop_path:environment.IMG_URL + item.backdrop_path,\n                                  release_date:new Date(item.release_date)\n                              });\n                          })\n                          console.log(this.movieCards);\n                          resolve();\n                      }, msg => reject());\n          })*/\n    }\n    /*\n          getAllMovieCards(): MovieCard[] {\n              console.log(\"bon ok\", this.movieCards)\n              return this.movieCards;\n          }*/\n    getMovieCardById(movieCardId) {\n      console.log('ok', movieCardId, this.movieCards);\n      const movieCard = this.movieCards.find(movieCard => movieCard.id === movieCardId);\n      if (!movieCard) throw new Error('MovieCard not found!');else return movieCard;\n    }\n  }\n  MovieCardsService.ɵfac = function MovieCardsService_Factory(t) {\n    return new (t || MovieCardsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  MovieCardsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MovieCardsService,\n    factory: MovieCardsService.ɵfac,\n    providedIn: 'root'\n  });\n  return MovieCardsService;\n})();","map":null,"metadata":{},"sourceType":"module"}